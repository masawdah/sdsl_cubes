nepal <- st_read("./data/nepal/landuse.shp")
# Read the shapefile
nepal <- st_read("../data/nepal/landuse.shp")
forest <- nepal %>%
filter(Category == "Forest")
# Plot the data
ggplot() +
geom_sf(data = forest, fill = "green", color = "darkgreen") +
labs(title = "Forest Areas in Nepal") +
theme_minimal()
nepal_bbox <- nepal |>
sf::st_transform(4326) |>
sf::st_bbox()
nepal_bbox
library(rstac)
# Define the Planetary Computer STAC endpoint
#planetary_computer_stac_url <- "https://planetarycomputer.microsoft.com/api/stac/v1"
# Connect to the Planetary Computer STAC API
#stac_source <- stac(planetary_computer_stac_url)
# Example: Search for items in a specific collection
#search_results <- stac_source %>%
#  stac_search(collections = "modis-15A2H-061",
#              bbox = c(83.47956, 28.24066, 84.46899, 29.33133 ),
#              datetime = "2023-08-01/2023-08-30") %>%
#  post_request()
# Display search results
#search_results
# Fetch the items
#items <- items_fetch(search_results)
#items
library(rstac)
#library(gdalcubes)
#col = stac_image_collection(items$features, asset_names = "Fpar_500m")
#items$features[[4]]$assets$Fpar_500m$href
# Select the assets you want to load (e.g., "Fpar_500m")
#asset_url <- items$features[[8]]$assets$Fpar_500m$href[1]  # Example: load the first asset
# Load the data with the desired CRS and resolution
#data <- read_stars(asset_url,
#                   proxy = TRUE,  # Use proxy = TRUE to handle large files efficiently
#                   options = c("TARGET_CRS=EPSG:3857", "RES=500"))
stac_query <- rstac::stac_search(
q = stac_source,
collections = "modis-15A2H-061",
bbox = nepal_bbox,
datetime = "2023-08-01/2023-08-30"
)
library(rstac)
# Define the Planetary Computer STAC endpoint
planetary_computer_stac_url <- "https://planetarycomputer.microsoft.com/api/stac/v1"
# Connect to the Planetary Computer STAC API
stac_source <- stac(planetary_computer_stac_url)
stac_query <- rstac::stac_search(
q = stac_source,
collections = "modis-15A2H-061",
bbox = nepal_bbox,
datetime = "2023-08-01/2023-08-30"
)
executed_stac_query <- rstac::get_request(stac_query)
executed_stac_query
signed_stac_query <- rstac::items_sign(
executed_stac_query,
rstac::sign_planetary_computer()
)
signed_stac_query
rstac::assets_download(signed_stac_query, "Fpar_500m", output_dir = tempdir())
#output_file <- file.path(
#  tempdir(),
#  "modis-061-cogs",
#  "MYD15A2H",
#  "24",
#  "05",
#  "2023209",
#  "MYD15A2H.A2023209.h24v05.061.2023220014058_Fpar_500m.tif"
#  )
#output_file
#output_file <- file.path(
#  tempdir(),
#  "modis-061-cogs",
#  "MYD15A2H",
#  "24",
#  "05",
#  "2023209",
#  "MYD15A2H.A2023209.h24v05.061.2023220014058_Fpar_500m.tif"
#  )
#output_file
x = read_stars(cog_files, proxy=FALSE)
output_file <- file.path(
tempdir(),
"modis-061-cogs"
#  "MYD15A2H",
#  "24",
#  "05",
#  "2023209",
#  "MYD15A2H.A2023209.h24v05.061.2023220014058_Fpar_500m.tif"
)
output_file
cog_files <- list.files(path = output_file,
pattern = "\\.tif$",
full.names = TRUE,
recursive = TRUE)
cog_files
x = read_stars(cog_files, proxy=FALSE)
library(stars)
x = read_stars(cog_files, proxy=FALSE)
library(stars)
library(abind)
x = read_stars(cog_files, proxy=FALSE)
x
plot(x, axes = TRUE)
col = stac_image_collection(executed_stac_query$features, asset_names = "Fpar_500m")
library(gdalcubes)
col = stac_image_collection(executed_stac_query$features, asset_names = "Fpar_500m")
items <- stac_source %>%
stac_search(collections = "modis-15A2H-061",
bbox = nepal_bbox, # Geneva
datetime = "2023-08-01/2023-08-30",
limit = 500) %>%
post_request()
bbox
nepal_bbox
items <- stac_source %>%
stac_search(collections = "modis-15A2H-061",
bbox = c(83.47956, 28.24066, 84.46899, 29.33133), # Geneva
datetime = "2023-08-01/2023-08-30",
limit = 500) %>%
post_request()
items
items <- stac_source %>%
stac_search(collections = "modis-15A2H-061",
bbox = c(83.47956, 28.24066, 84.46899, 29.33133), # Geneva
datetime = "2023-08-01/2023-08-30",
limit = 500) %>%
post_request()
items
library(gdalcubes)
col = stac_image_collection(items$features, asset_names = "Fpar_500m")
items$features
items <- stac_source %>%
stac_search(collections = "sentinel-s2-l2a-cogs",
bbox = c(83.47956, 28.24066, 84.46899, 29.33133), # Geneva
datetime = "2023-08-01/2023-08-30",
limit = 500) %>%
post_request()
items
items <- stac_source %>%
stac_search(collections = "sentinel-s2-l2a-cogs",
bbox = c(83.47956, 28.24066, 84.46899, 29.33133), # Geneva
datetime = c(-100.9,37.6, -100.6,37.8), #"2023-08-01/2023-08-30",
limit = 500) %>%
post_request()
s = stac("https://earth-search.aws.element84.com/v0")
items <- s %>%
stac_search(collections = "sentinel-s2-l2a-cogs",
bbox = c(83.47956, 28.24066, 84.46899, 29.33133), # Geneva
datetime = c(-100.9,37.6, -100.6,37.8), #"2023-08-01/2023-08-30",
limit = 500) %>%
post_request()
s = stac("https://earth-search.aws.element84.com/v0")
items <- s %>%
stac_search(collections = "sentinel-s2-l2a-cogs",
bbox = c(-100.9,37.6, -100.6,37.8), #c(83.47956, 28.24066, 84.46899, 29.33133), # Geneva
datetime = "2023-08-01/2023-08-30",
limit = 500) %>%
post_request()
items
s = stac("https://earth-search.aws.element84.com/v0")
items <- s %>%
stac_search(collections = "sentinel-s2-l2a-cogs",
bbox = c(6.1,46.2,6.2,46.3), #c(83.47956, 28.24066, 84.46899, 29.33133), # Geneva
datetime = "2020-01-01/2020-12-31",
limit = 500) %>%
post_request()
items
library(gdalcubes)
col = stac_image_collection(items$features, asset_names = "Fpar_500m")
library(gdalcubes)
col = stac_image_collection(items$features, asset_names = "b1")
library(gdalcubes)
col = stac_image_collection(items$features, asset_names = "b01")
library(gdalcubes)
col = stac_image_collection(items$features, asset_names = "B01")
library(gdalcubes)
col = stac_image_collection(items$features, asset_names = "B01")
col
s = stac("https://earth-search.aws.element84.com/v0")
#collections = "modis-15A2H-061",
#bbox = nepal_bbox,
#datetime = "2023-08-01/2023-08-30"
items <- s %>%
stac_search(collections = "modis-15A2H-061",
bbox = c(6.1,46.2,6.2,46.3), #c(83.47956, 28.24066, 84.46899, 29.33133), # Geneva
datetime = "2020-01-01/2020-12-31",
limit = 500) %>%
post_request()
s = stac("https://earth-search.aws.element84.com/v0")
#collections = "modis-15A2H-061",
#bbox = nepal_bbox,
#datetime = "2023-08-01/2023-08-30"
items <- stac_query %>%
stac_search(collections = "modis-15A2H-061",
bbox = c(6.1,46.2,6.2,46.3), #c(83.47956, 28.24066, 84.46899, 29.33133), # Geneva
datetime = "2020-01-01/2020-12-31",
limit = 500) %>%
post_request()
items
library(gdalcubes)
col = stac_image_collection(items$features, asset_names = "B01")
library(gdalcubes)
col = stac_image_collection(items$features, asset_names = "Fpar_500m")
library(stars)
library(abind)
x = read_stars(cog_files, proxy=FALSE)
x
library(sf)
library(dplyr)
library(ggplot2)
# Read the shapefile
nepal <- st_read("../data/nepal/landuse.shp")
# Nepal bbox
nepal_bbox <- nepal |>
sf::st_transform(4326) |>
sf::st_bbox()
# Filter the forest
forest <- nepal %>%
filter(Category == "Forest")
# Plot the data
ggplot() +
geom_sf(data = forest, fill = "green", color = "darkgreen") +
labs(title = "Forest Areas in Nepal") +
theme_minimal()
# Download
library(rstac)
# Define the Planetary Computer STAC endpoint
planetary_computer_stac_url <- "https://planetarycomputer.microsoft.com/api/stac/v1"
# Connect to the Planetary Computer STAC API
stac_source <- stac(planetary_computer_stac_url)
stac_query <- rstac::stac_search(
q = stac_source,
collections = "modis-15A2H-061",
bbox = nepal_bbox,
datetime = "2023-08-01/2023-08-30"
)
executed_stac_query <- rstac::get_request(stac_query)
executed_stac_query
rstac::assets_download(executed_stac_query, "Fpar_500m", output_dir = tempdir())
rstac::assets_download(executed_stac_query, "Fpar_500m", output_dir = tempdir(), overwrite= TRUE)
rstac::assets_download(executed_stac_query, "Fpar_500m", output_dir = tempdir(), overwrite= TRUE)
output_file <- file.path(
tempdir(),
"modis-061-cogs"
)
cog_files <- list.files(path = output_file,
pattern = "\\.tif$",
full.names = TRUE,
recursive = TRUE)
cog_files
library(stars)
library(abind)
x = read_stars(cog_files, proxy=FALSE)
output_file <- file.path(
tempdir(),
"modis-061-cogs"
)
cog_files <- list.files(path = output_file,
pattern = "\\.tif$",
full.names = TRUE,
recursive = TRUE)
cog_files
library(stars)
library(abind)
x = read_stars(cog_files, proxy=FALSE)
library(sf)
library(dplyr)
library(ggplot2)
# Read the shapefile
nepal <- st_read("../data/nepal/landuse.shp")
# Nepal bbox
nepal_bbox <- nepal |>
sf::st_transform(4326) |>
sf::st_bbox()
# Filter the forest
forest <- nepal %>%
filter(Category == "Forest")
# Plot the data
ggplot() +
geom_sf(data = forest, fill = "green", color = "darkgreen") +
labs(title = "Forest Areas in Nepal") +
theme_minimal()
# Download
library(rstac)
# Define the Planetary Computer STAC endpoint
planetary_computer_stac_url <- "https://planetarycomputer.microsoft.com/api/stac/v1"
# Connect to the Planetary Computer STAC API
stac_source <- stac(planetary_computer_stac_url)
stac_query <- rstac::stac_search(
q = stac_source,
collections = "modis-15A2H-061",
bbox = nepal_bbox,
datetime = "2023-08-01/2023-08-30"
)
executed_stac_query <- rstac::get_request(stac_query)
executed_stac_query
signed_stac_query <- rstac::items_sign(
executed_stac_query,
rstac::sign_planetary_computer()
)
signed_stac_query
rstac::assets_download(executed_stac_query, "Fpar_500m", output_dir = tempdir(), overwrite= TRUE)
output_file <- file.path(
tempdir(),
"modis-061-cogs"
)
cog_files <- list.files(path = output_file,
pattern = "\\.tif$",
full.names = TRUE,
recursive = TRUE)
cog_files
library(stars)
library(abind)
x = read_stars(cog_files, proxy=FALSE)
list.files("/private/var/folders/s_/w16tjsxn3jgb8mlcdvdrk9b80000gn/T/RtmpSzDtdD/modis-061-cogs/MCD15A2H/25/06/2023209")
library(sf)
library(dplyr)
library(ggplot2)
# Read the shapefile
nepal <- st_read("../data/nepal/landuse.shp")
# Nepal bbox
nepal_bbox <- nepal |>
sf::st_transform(4326) |>
sf::st_bbox()
# Filter the forest
forest <- nepal %>%
filter(Category == "Forest")
# Plot the data
ggplot() +
geom_sf(data = forest, fill = "green", color = "darkgreen") +
labs(title = "Forest Areas in Nepal") +
theme_minimal()
# Download
library(rstac)
# Define the Planetary Computer STAC endpoint
planetary_computer_stac_url <- "https://planetarycomputer.microsoft.com/api/stac/v1"
# Connect to the Planetary Computer STAC API
stac_source <- stac(planetary_computer_stac_url)
stac_query <- rstac::stac_search(
q = stac_source,
collections = "modis-15A2H-061",
bbox = nepal_bbox,
datetime = "2023-08-01/2023-08-30"
)
executed_stac_query <- rstac::get_request(stac_query)
executed_stac_query
signed_stac_query <- rstac::items_sign(
executed_stac_query,
rstac::sign_planetary_computer()
)
signed_stac_query
help(assets_download)
rstac::assets_download(signed_stac_query, "metadata", output_dir = ".", overwrite= TRUE)
output_file <- file.path(
".",
"modis-061-cogs"
)
output_file <- file.path(
".",
"modis-061-cogs"
)
list.files(output_file)
output_file <- file.path(
".",
#"modis-061-cogs"
)
output_file <- file.path(
.,
#"modis-061-cogs"
)
help(assets_download)
rstac::assets_download(signed_stac_query, "Fpar_500m",use_gdal = TRUE, output_dir = tempdir(), overwrite= TRUE)
library(sf)
library(dplyr)
library(ggplot2)
# Read the shapefile
nepal <- st_read("../data/nepal/landuse.shp")
# Nepal bbox
nepal_bbox <- nepal |>
sf::st_transform(4326) |>
sf::st_bbox()
# Filter the forest
forest <- nepal %>%
filter(Category == "Forest")
# Read the shapefile
nepal <- st_read("../data/nepal/landuse.shp")
# Nepal bbox
nepal_bbox <- nepal |>
sf::st_transform(4326) |>
sf::st_bbox()
# Filter the forest
forest <- nepal %>%
filter(Category == "Forest")
# Plot the data
ggplot() +
geom_sf(data = forest, fill = "green", color = "darkgreen") +
labs(title = "Forest Areas in Nepal") +
theme_minimal()
# Download
library(rstac)
# Define the Planetary Computer STAC endpoint
planetary_computer_stac_url <- "https://planetarycomputer.microsoft.com/api/stac/v1"
# Connect to the Planetary Computer STAC API
stac_source <- stac(planetary_computer_stac_url)
stac_query <- rstac::stac_search(
q = stac_source,
collections = "modis-15A2H-061",
bbox = nepal_bbox,
datetime = "2023-08-01/2023-08-30"
)
executed_stac_query <- rstac::get_request(stac_query)
executed_stac_query
signed_stac_query <- rstac::items_sign(
executed_stac_query,
rstac::sign_planetary_computer()
)
signed_stac_query
rstac::assets_download(signed_stac_query, "Fpar_500m",use_gdal = TRUE, output_dir = tempdir(), overwrite= TRUE)
output_file <- file.path(
tempdir(),
"modis-061-cogs"
)
cog_files <- list.files(path = output_file,
pattern = "\\.tif$",
full.names = TRUE,
recursive = TRUE)
cog_files
library(stars)
x = read_stars(cog_files, proxy=FALSE)
x
help(stac_search)
help(get_request)
library(rstac)
s = stac("https://earth-search.aws.element84.com/v0")
items <- s %>%
stac_search(collections = "sentinel-s2-l2a-cogs",
bbox = c(6.1,46.2,6.2,46.3), # Geneva
datetime = "2020-01-01/2020-12-31",
limit = 500) %>%
post_request()
help(stac_search)
# Download
library(rstac)
# Define the Planetary Computer STAC endpoint
planetary_computer_stac_url <- "https://planetarycomputer.microsoft.com/api/stac/v1"
# Connect to the Planetary Computer STAC API
stac_source <- stac(planetary_computer_stac_url)
stac_query <- rstac::stac_search(
q = stac_source,
collections = "modis-15A2H-061",
bbox = nepal_bbox,
datetime = "2023-08-01/2023-08-02"
)
executed_stac_query <- rstac::get_request(stac_query)
executed_stac_query
signed_stac_query <- rstac::items_sign(
executed_stac_query,
rstac::sign_planetary_computer()
)
signed_stac_query
rstac::assets_download(signed_stac_query, "Fpar_500m",use_gdal = TRUE, output_dir = tempdir(), overwrite= TRUE)
output_file <- file.path(
tempdir(),
"modis-061-cogs"
)
cog_files <- list.files(path = output_file,
pattern = "\\.tif$",
full.names = TRUE,
recursive = TRUE)
cog_files
unlink("/var/folders/s_/w16tjsxn3jgb8mlcdvdrk9b80000gn/T//Rtmp6muy7y/modis-061-cogs/", recursive = TRUE)
output_file <- file.path(
tempdir(),
"modis-061-cogs"
)
cog_files <- list.files(path = output_file,
pattern = "\\.tif$",
full.names = TRUE,
recursive = TRUE)
cog_files
rstac::assets_download(signed_stac_query, "Fpar_500m",use_gdal = TRUE, output_dir = tempdir(), overwrite= TRUE)
output_file <- file.path(
tempdir(),
"modis-061-cogs"
)
cog_files <- list.files(path = output_file,
pattern = "\\.tif$",
full.names = TRUE,
recursive = TRUE)
cog_files
library(stars)
x = read_stars(cog_files, proxy=FALSE)
x
library(stars)
x = read_stars(cog_files[0], proxy=FALSE)
cog_files[0]
cog_files[[0]]
cog_files
cog_files[1]
library(stars)
x = read_stars(cog_files[1], proxy=FALSE)
x
getwd()
setwd("./dev/sdsl_cubes"
)
getwd()
